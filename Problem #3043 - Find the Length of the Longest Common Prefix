class TrieNode:
    def __init__(self):
        self.children = {}

class Trie:
    def __init__(self):
        self.root = TrieNode()

    def insert(self, word):
        node = self.root
        for char in word:
            if char not in node.children:
                node.children[char] = TrieNode()
            node = node.children[char]

    def mcpl(self, word):
        node = self.root
        common_length = 0
        
        for char in word:
            if char in node.children:
                node = node.children[char]
                common_length += 1
            else:
                break
        
        return common_length

class Solution(object):
    def longestCommonPrefix(self, arr1, arr2):
        """
        :type arr1: List[int]
        :type arr2: List[int]
        :rtype: int
        """
        s1=set(str(x) for x in arr1)
        s2=set(str(x) for x in arr2)
        if(len(s2)>len(s1)):
            tmp=s2
            s2=s1
            s1=tmp

        ans=0
        trie=Trie()
        for s in s1:trie.insert(s)
        for s in s2:ans=max(ans,trie.mcpl(s))

        return ans
        
