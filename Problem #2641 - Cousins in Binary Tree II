# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def replaceValueInTree(self, root: Optional[TreeNode]) -> Optional[TreeNode]:
        ls=[]
        def culLevelSum(node,level):
            nonlocal ls
            if node!=None:
                if level>=len(ls):
                    ls.append(0)
                ls[level]+=node.val
                culLevelSum(node.left,level+1)
                culLevelSum(node.right,level+1)
        def replace(node,level):
            nonlocal ls
            childSum=0
            if node.left!=None:
                childSum+=node.left.val
            if node.right!=None:
                childSum+=node.right.val
            if node.left!=None:
                node.left.val=ls[level+1]-childSum
                replace(node.left,level+1)
            if node.right!=None:
                node.right.val=ls[level+1]-childSum
                replace(node.right,level+1)
        culLevelSum(root,0)
        root.val=0
        replace(root,0)
        return root
        
